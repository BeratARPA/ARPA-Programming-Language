//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ARPA.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class ARPAParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, SOLPARANTEZ=2, SAĞPARANTEZ=3, SOLSÜSLÜPARANTEZ=4, SAĞSÜSLÜPARANTEZ=5, 
		NOKTALIVİRGÜL=6, SAYI=7, METİN=8, ONDALIK=9, MANTIK=10, ARTI=11, EKSİ=12, 
		ÇARPIM=13, BÖLÜ=14, MOD=15, ATAMA=16, AND=17, OR=18, EŞİT=19, EŞİTDEĞİL=20, 
		BÜYÜK=21, KÜÇÜK=22, BÜYÜKEŞİT=23, KÜÇÜKEŞİT=24, EĞER=25, DEĞİLSEEĞER=26, 
		DEĞİLSE=27, İÇİN=28, İKEN=29, YAZDIR=30, ID=31, NUMBER=32, STRING=33, 
		WS=34, COMMENT=35;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_declaration = 2, RULE_variableDeclaration = 3, 
		RULE_functionDeclaration = 4, RULE_assignment = 5, RULE_expressionStatement = 6, 
		RULE_ifStatement = 7, RULE_printStatement = 8, RULE_block = 9, RULE_expression = 10;
	public static readonly string[] ruleNames = {
		"program", "statement", "declaration", "variableDeclaration", "functionDeclaration", 
		"assignment", "expressionStatement", "ifStatement", "printStatement", 
		"block", "expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'('", "')'", "'{'", "'}'", "';'", "'say\\u0131'", "'metin'", 
		"'ondal\\u0131k'", "'mant\\u0131k'", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'='", "'ve'", "'veya'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", 
		"'e\\u011Fer'", "'de\\u011Filsee\\u011Fer'", "'de\\u011Filse'", "'i\\u00E7in'", 
		"'iken'", "'yazd\\u0131r'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "SOLPARANTEZ", "SA\u0002PARANTEZ", "SOLS\u0004SL\u0007PARANTEZ", 
		"SA\u0002S\u0004SL\u0007PARANTEZ", "NOKTALIV\u0008RG\u000BL", "SAYI", 
		"MET\u0003N", "ONDALIK", "MANTIK", "ARTI", "EKS\u0003", "\u0000ARPIM", 
		"B\u0001L\u0003", "MOD", "ATAMA", "AND", "OR", "E\u0001\u0002T", "E\u0001\u0002TDE\u0006\u0007L", 
		"B\u0001Y\u0003K", "K\u0001\u0002\u0003K", "B\u0001Y\u0003KE\u0006\u0007T", 
		"K\u0001\u0002\u0003KE\u0006\u0007T", "E\u0001ER", "DE\u0002\u0003LSEE\u0008ER", 
		"DE\u0002\u0003LSE", "\u0000\u0001\u0002N", "\u0000KEN", "YAZDIR", "ID", 
		"NUMBER", "STRING", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ARPA.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ARPAParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ARPAParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ARPAParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IARPAVisitor<TResult> typedVisitor = visitor as IARPAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16139683732L) != 0)) {
				{
				{
				State = 22;
				statement();
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintStatementContext printStatement() {
			return GetRuleContext<PrintStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IARPAVisitor<TResult> typedVisitor = visitor as IARPAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 34;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 28;
				declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 29;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 30;
				expressionStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 31;
				ifStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 32;
				printStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 33;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IARPAVisitor<TResult> typedVisitor = visitor as IARPAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		try {
			State = 38;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 36;
				variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 37;
				functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ARPAParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOKTALIVİRGÜL() { return GetToken(ARPAParser.NOKTALIVİRGÜL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAYI() { return GetToken(ARPAParser.SAYI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METİN() { return GetToken(ARPAParser.METİN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONDALIK() { return GetToken(ARPAParser.ONDALIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MANTIK() { return GetToken(ARPAParser.MANTIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAMA() { return GetToken(ARPAParser.ATAMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IARPAVisitor<TResult> typedVisitor = visitor as IARPAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 41;
			Match(ID);
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ATAMA) {
				{
				State = 42;
				Match(ATAMA);
				State = 43;
				expression(0);
				}
			}

			State = 46;
			Match(NOKTALIVİRGÜL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(ARPAParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(ARPAParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOLPARANTEZ() { return GetToken(ARPAParser.SOLPARANTEZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAĞPARANTEZ() { return GetToken(ARPAParser.SAĞPARANTEZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOLSÜSLÜPARANTEZ() { return GetToken(ARPAParser.SOLSÜSLÜPARANTEZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAĞSÜSLÜPARANTEZ() { return GetToken(ARPAParser.SAĞSÜSLÜPARANTEZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAYI() { return GetToken(ARPAParser.SAYI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METİN() { return GetToken(ARPAParser.METİN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONDALIK() { return GetToken(ARPAParser.ONDALIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MANTIK() { return GetToken(ARPAParser.MANTIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IARPAVisitor<TResult> typedVisitor = visitor as IARPAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1920L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 49;
			Match(ID);
			State = 50;
			Match(SOLPARANTEZ);
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 51;
				Match(ID);
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 52;
					Match(T__0);
					State = 53;
					Match(ID);
					}
					}
					State = 58;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 61;
			Match(SAĞPARANTEZ);
			State = 62;
			Match(SOLSÜSLÜPARANTEZ);
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16139683732L) != 0)) {
				{
				{
				State = 63;
				statement();
				}
				}
				State = 68;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 69;
			Match(SAĞSÜSLÜPARANTEZ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ARPAParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATAMA() { return GetToken(ARPAParser.ATAMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOKTALIVİRGÜL() { return GetToken(ARPAParser.NOKTALIVİRGÜL, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IARPAVisitor<TResult> typedVisitor = visitor as IARPAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(ID);
			State = 72;
			Match(ATAMA);
			State = 73;
			expression(0);
			State = 74;
			Match(NOKTALIVİRGÜL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOKTALIVİRGÜL() { return GetToken(ARPAParser.NOKTALIVİRGÜL, 0); }
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IARPAVisitor<TResult> typedVisitor = visitor as IARPAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			expression(0);
			State = 77;
			Match(NOKTALIVİRGÜL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EĞER() { return GetToken(ARPAParser.EĞER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SOLPARANTEZ() { return GetTokens(ARPAParser.SOLPARANTEZ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOLPARANTEZ(int i) {
			return GetToken(ARPAParser.SOLPARANTEZ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SAĞPARANTEZ() { return GetTokens(ARPAParser.SAĞPARANTEZ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAĞPARANTEZ(int i) {
			return GetToken(ARPAParser.SAĞPARANTEZ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEĞİLSEEĞER() { return GetToken(ARPAParser.DEĞİLSEEĞER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEĞİLSE() { return GetToken(ARPAParser.DEĞİLSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IARPAVisitor<TResult> typedVisitor = visitor as IARPAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(EĞER);
			State = 80;
			Match(SOLPARANTEZ);
			State = 81;
			expression(0);
			State = 82;
			Match(SAĞPARANTEZ);
			State = 83;
			block();
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEĞİLSEEĞER) {
				{
				State = 84;
				Match(DEĞİLSEEĞER);
				State = 85;
				Match(SOLPARANTEZ);
				State = 86;
				expression(0);
				State = 87;
				Match(SAĞPARANTEZ);
				State = 88;
				block();
				}
			}

			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEĞİLSE) {
				{
				State = 92;
				Match(DEĞİLSE);
				State = 93;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YAZDIR() { return GetToken(ARPAParser.YAZDIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOLPARANTEZ() { return GetToken(ARPAParser.SOLPARANTEZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAĞPARANTEZ() { return GetToken(ARPAParser.SAĞPARANTEZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOKTALIVİRGÜL() { return GetToken(ARPAParser.NOKTALIVİRGÜL, 0); }
		public PrintStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.EnterPrintStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.ExitPrintStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IARPAVisitor<TResult> typedVisitor = visitor as IARPAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStatementContext printStatement() {
		PrintStatementContext _localctx = new PrintStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_printStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(YAZDIR);
			State = 97;
			Match(SOLPARANTEZ);
			State = 98;
			expression(0);
			State = 99;
			Match(SAĞPARANTEZ);
			State = 100;
			Match(NOKTALIVİRGÜL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOLSÜSLÜPARANTEZ() { return GetToken(ARPAParser.SOLSÜSLÜPARANTEZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAĞSÜSLÜPARANTEZ() { return GetToken(ARPAParser.SAĞSÜSLÜPARANTEZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IARPAVisitor<TResult> typedVisitor = visitor as IARPAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 18, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(SOLSÜSLÜPARANTEZ);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 16139683732L) != 0)) {
				{
				{
				State = 103;
				statement();
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 109;
			Match(SAĞSÜSLÜPARANTEZ);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(ARPAParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ARPAParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ARPAParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MANTIK() { return GetToken(ARPAParser.MANTIK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOLPARANTEZ() { return GetToken(ARPAParser.SOLPARANTEZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAĞPARANTEZ() { return GetToken(ARPAParser.SAĞPARANTEZ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARTI() { return GetToken(ARPAParser.ARTI, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EKSİ() { return GetToken(ARPAParser.EKSİ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ÇARPIM() { return GetToken(ARPAParser.ÇARPIM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BÖLÜ() { return GetToken(ARPAParser.BÖLÜ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(ARPAParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EŞİT() { return GetToken(ARPAParser.EŞİT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EŞİTDEĞİL() { return GetToken(ARPAParser.EŞİTDEĞİL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BÜYÜK() { return GetToken(ARPAParser.BÜYÜK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KÜÇÜK() { return GetToken(ARPAParser.KÜÇÜK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BÜYÜKEŞİT() { return GetToken(ARPAParser.BÜYÜKEŞİT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KÜÇÜKEŞİT() { return GetToken(ARPAParser.KÜÇÜKEŞİT, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IARPAListener typedListener = listener as IARPAListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IARPAVisitor<TResult> typedVisitor = visitor as IARPAVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				{
				State = 112;
				Match(ID);
				}
				break;
			case NUMBER:
				{
				State = 113;
				Match(NUMBER);
				}
				break;
			case STRING:
				{
				State = 114;
				Match(STRING);
				}
				break;
			case MANTIK:
				{
				State = 115;
				Match(MANTIK);
				}
				break;
			case SOLPARANTEZ:
				{
				State = 116;
				Match(SOLPARANTEZ);
				State = 117;
				expression(0);
				State = 118;
				Match(SAĞPARANTEZ);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 130;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 128;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 122;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 123;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 63488L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 124;
						expression(8);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 125;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 126;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 33030144L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 127;
						expression(7);
						}
						break;
					}
					} 
				}
				State = 132;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 10: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,35,134,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,5,0,24,8,0,10,0,12,0,27,9,0,1,1,1,1,
		1,1,1,1,1,1,1,1,3,1,35,8,1,1,2,1,2,3,2,39,8,2,1,3,1,3,1,3,1,3,3,3,45,8,
		3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,5,4,55,8,4,10,4,12,4,58,9,4,3,4,60,8,
		4,1,4,1,4,1,4,5,4,65,8,4,10,4,12,4,68,9,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
		1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,91,8,7,1,7,
		1,7,3,7,95,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,5,9,105,8,9,10,9,12,9,108,
		9,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,121,8,10,
		1,10,1,10,1,10,1,10,1,10,1,10,5,10,129,8,10,10,10,12,10,132,9,10,1,10,
		0,1,20,11,0,2,4,6,8,10,12,14,16,18,20,0,3,1,0,7,10,1,0,11,15,1,0,19,24,
		142,0,25,1,0,0,0,2,34,1,0,0,0,4,38,1,0,0,0,6,40,1,0,0,0,8,48,1,0,0,0,10,
		71,1,0,0,0,12,76,1,0,0,0,14,79,1,0,0,0,16,96,1,0,0,0,18,102,1,0,0,0,20,
		120,1,0,0,0,22,24,3,2,1,0,23,22,1,0,0,0,24,27,1,0,0,0,25,23,1,0,0,0,25,
		26,1,0,0,0,26,1,1,0,0,0,27,25,1,0,0,0,28,35,3,4,2,0,29,35,3,10,5,0,30,
		35,3,12,6,0,31,35,3,14,7,0,32,35,3,16,8,0,33,35,3,18,9,0,34,28,1,0,0,0,
		34,29,1,0,0,0,34,30,1,0,0,0,34,31,1,0,0,0,34,32,1,0,0,0,34,33,1,0,0,0,
		35,3,1,0,0,0,36,39,3,6,3,0,37,39,3,8,4,0,38,36,1,0,0,0,38,37,1,0,0,0,39,
		5,1,0,0,0,40,41,7,0,0,0,41,44,5,31,0,0,42,43,5,16,0,0,43,45,3,20,10,0,
		44,42,1,0,0,0,44,45,1,0,0,0,45,46,1,0,0,0,46,47,5,6,0,0,47,7,1,0,0,0,48,
		49,7,0,0,0,49,50,5,31,0,0,50,59,5,2,0,0,51,56,5,31,0,0,52,53,5,1,0,0,53,
		55,5,31,0,0,54,52,1,0,0,0,55,58,1,0,0,0,56,54,1,0,0,0,56,57,1,0,0,0,57,
		60,1,0,0,0,58,56,1,0,0,0,59,51,1,0,0,0,59,60,1,0,0,0,60,61,1,0,0,0,61,
		62,5,3,0,0,62,66,5,4,0,0,63,65,3,2,1,0,64,63,1,0,0,0,65,68,1,0,0,0,66,
		64,1,0,0,0,66,67,1,0,0,0,67,69,1,0,0,0,68,66,1,0,0,0,69,70,5,5,0,0,70,
		9,1,0,0,0,71,72,5,31,0,0,72,73,5,16,0,0,73,74,3,20,10,0,74,75,5,6,0,0,
		75,11,1,0,0,0,76,77,3,20,10,0,77,78,5,6,0,0,78,13,1,0,0,0,79,80,5,25,0,
		0,80,81,5,2,0,0,81,82,3,20,10,0,82,83,5,3,0,0,83,90,3,18,9,0,84,85,5,26,
		0,0,85,86,5,2,0,0,86,87,3,20,10,0,87,88,5,3,0,0,88,89,3,18,9,0,89,91,1,
		0,0,0,90,84,1,0,0,0,90,91,1,0,0,0,91,94,1,0,0,0,92,93,5,27,0,0,93,95,3,
		18,9,0,94,92,1,0,0,0,94,95,1,0,0,0,95,15,1,0,0,0,96,97,5,30,0,0,97,98,
		5,2,0,0,98,99,3,20,10,0,99,100,5,3,0,0,100,101,5,6,0,0,101,17,1,0,0,0,
		102,106,5,4,0,0,103,105,3,2,1,0,104,103,1,0,0,0,105,108,1,0,0,0,106,104,
		1,0,0,0,106,107,1,0,0,0,107,109,1,0,0,0,108,106,1,0,0,0,109,110,5,5,0,
		0,110,19,1,0,0,0,111,112,6,10,-1,0,112,121,5,31,0,0,113,121,5,32,0,0,114,
		121,5,33,0,0,115,121,5,10,0,0,116,117,5,2,0,0,117,118,3,20,10,0,118,119,
		5,3,0,0,119,121,1,0,0,0,120,111,1,0,0,0,120,113,1,0,0,0,120,114,1,0,0,
		0,120,115,1,0,0,0,120,116,1,0,0,0,121,130,1,0,0,0,122,123,10,7,0,0,123,
		124,7,1,0,0,124,129,3,20,10,8,125,126,10,6,0,0,126,127,7,2,0,0,127,129,
		3,20,10,7,128,122,1,0,0,0,128,125,1,0,0,0,129,132,1,0,0,0,130,128,1,0,
		0,0,130,131,1,0,0,0,131,21,1,0,0,0,132,130,1,0,0,0,13,25,34,38,44,56,59,
		66,90,94,106,120,128,130
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
